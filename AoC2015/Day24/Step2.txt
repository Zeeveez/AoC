Steps without division act as pushing onto the z "stack", e.g.:

    w = inputs[0]
    x = (z % 26 + 10) != w
    z = z * (25 * x + 1) + w * x

The line:

    x = (z % 26 + 10) != w

will always result in x == 1, as the number added to z % 26 (in this case, 10) is always greater than 8, and as 0 < w <= 9, the inequality will always hold.


Steps with division act as popping off of the z "stack", e.g.:

    w = inputs[5]
    x = (z % 26 - 2) != w
    z = z // 26 * (25 * x + 1) + (w + 1) * x

The line:

    x = (z % 26 - 2) != w

will always be possible to hold, as the number added to z % 26 (in this case, -2), combined with the number added when constructing z previously (in this case the number for inputs[4], 9 (from (w + 9))), will always be able to be within 0 < w <= 9.


From this we can match up steps:

    Push [0]
        Push [1]
            Push [2]
                Push [3]
                    Push [4]
                    Pop [5]
                    Push [6]
                    Pop [7]
                Pop [8]
                Push [9]
                Pop [10]
            Pop [11]
        Pop [12]
    Pop [13]

So the following input digits are linked:

    0 - 13
    1 - 12
    2 - 11
    3 - 10
    4 - 5
    6 - 7
    8 - 9


Looking at a specific pair of these:

    w = inputs[4]
    x = (z % 26 + 14) != w
    z = z * (25 * x + 1) + (w + 9) * x

    w = inputs[5]
    x = (z % 26 - 2) != w
    z = z // 26 * (25 * x + 1) + (w + 1) * x

When pushing 4, we add 9, when popping back off, we subtract 2, therefore, inputs[5] must be inputs[4] + 7, this step can be repeated for each pair to create the following rules:

    [5] = [4] + 7
    [7] = [6] - 5
    [8] = [3] - 8
    [10] = [9] - 4
    [11] = [2]
    [12] = [1] + 5
    [13] = [0] - 1

From this it is trivial to find the maximum value and minimum value of the entire input by maximising/minimizing low indexes respectfully while abiding by the given rules:

    Max = [9,4,9,9,2,9,9,4,1,9,5,9,9,8]
    Min = [2,1,1,9,1,8,6,1,1,5,1,1,6,1]